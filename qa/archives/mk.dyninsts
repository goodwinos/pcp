#!/usr/bin/env pmpython
# -*- coding: utf-8 -*-
# pylint: disable=invalid-name
""" Generate a test archive for testing dynamic header / instances """

from pcp import pmapi, pmi

# Our metrics for testing
metrics = ["disk.dev.read", "disk.dev.write", "mem.util.free", "mem.util.used"]

# Instances / disk
insts_d = ["sda", "sdb", "sdc", "sdd", "sde"]

# Get a context
pmfg = pmapi.fetchgroup()
ctx = pmfg.get_context()

# Initialize the archive
arch = pmi.pmiLogImport("dyninsts")
arch.pmiSetHostname("localhost")
arch.pmiSetTimezone("UTC")
for metric in metrics:
    pmids = ctx.pmLookupName(metric)
    descs = ctx.pmLookupDescs(pmids)
    arch.pmiAddMetric(metric,
                      pmids[0],
                      descs[0].contents.type,
                      descs[0].contents.indom,
                      descs[0].contents.sem,
                      descs[0].contents.units)
inst = -1
for name in insts_d:
    inst += 1
    pmids = ctx.pmLookupName("disk.dev.read")
    descs = ctx.pmLookupDescs(pmids)
    indom = descs[0].contents.indom
    arch.pmiAddInstance(indom, name, inst)

# Timestamp
start = 0
batch = -1

# Two instance values (cumulative counters) appear
for _ in range(2):
    batch += 1
    for name in insts_d:
        if name in ('sda', 'sdb'):
            arch.pmiPutValue("disk.dev.read", name, "%d" % batch)
            arch.pmiPutValue("disk.dev.write", name, "%d" % batch)
    arch.pmiWrite(start + batch, 0)

# Two more instance values and a singular metric value appear
for _ in range(2):
    batch += 1
    for name in insts_d:
        if name in ('sda', 'sdb', 'sdc', 'sdd'):
            arch.pmiPutValue("disk.dev.read", name, "%d" % batch)
            arch.pmiPutValue("disk.dev.write", name, "%d" % batch)
    arch.pmiPutValue("mem.util.used", None, "%d" % batch)
    arch.pmiWrite(start + batch, 0)

# Two instance values disappear
for _ in range(2):
    batch += 1
    for name in insts_d:
        if name in ('sdb', 'sdd'):
            arch.pmiPutValue("disk.dev.read", name, "%d" % batch)
            arch.pmiPutValue("disk.dev.write", name, "%d" % batch)
    arch.pmiPutValue("mem.util.used", None, "%d" % batch)
    arch.pmiWrite(start + batch, 0)

# Two instance values still missing, the singular metric disappears,
# a new instance values appears but only for one, not both, metrics
for _ in range(2):
    batch += 1
    for name in insts_d:
        if name in ('sdb', 'sdd'):
            arch.pmiPutValue("disk.dev.read", name, "%d" % batch)
            arch.pmiPutValue("disk.dev.write", name, "%d" % batch)
        if name in ('sde'):
            arch.pmiPutValue("disk.dev.read", name, "%d" % batch)
    arch.pmiWrite(start + batch, 0)

# All values available
for _ in range(5):
    batch += 1
    for name in insts_d:
        arch.pmiPutValue("disk.dev.read", name, "%d" % batch)
        arch.pmiPutValue("disk.dev.write", name, "%d" % batch)
    arch.pmiPutValue("mem.util.used", None, "%d" % batch)
    arch.pmiWrite(start + batch, 0)

# Three instance values disappear
for _ in range(2):
    batch += 1
    for name in insts_d:
        if name in ('sda', 'sdc'):
            arch.pmiPutValue("disk.dev.read", name, "%d" % batch)
            arch.pmiPutValue("disk.dev.write", name, "%d" % batch)
    arch.pmiPutValue("mem.util.used", None, "%d" % batch)
    arch.pmiWrite(start + batch, 0)

# All previous values gone, new singular metric appear
for _ in range(2):
    batch += 1
    arch.pmiPutValue("mem.util.free", None, "%d" % batch)
    arch.pmiWrite(start + batch, 0)

# With both singular metrics gone, one lone instance appears for
# the last time, but at different times for the multi-valued metrics
i = 0
for _ in range(3):
    batch += 1
    for name in insts_d:
        if name in ('sdb'):
            arch.pmiPutValue("disk.dev.read", name, "%d" % batch)
            if i:
                arch.pmiPutValue("disk.dev.write", name, "%d" % batch)
            i = 1
    arch.pmiWrite(start + batch, 0)

# Done
arch.pmiEnd()
